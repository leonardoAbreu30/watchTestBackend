name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ENVIRONMENT: ${{ vars.ENVIRONMENT }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          npm run build
          cp package*.json dist/
          cd dist && npm ci --production
          zip -r lambda.zip *

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_host=${{ secrets.DB_HOST }}" \
            -var="db_port=${{ secrets.DB_PORT }}" \
            -var="db_name=${{ secrets.DB_NAME }}" \
            -var="db_user=${{ secrets.DB_USER }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -var="cors_origin=${{ vars.CORS_ORIGIN }}"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -var="db_host=${{ secrets.DB_HOST }}" \
            -var="db_port=${{ secrets.DB_PORT }}" \
            -var="db_name=${{ secrets.DB_NAME }}" \
            -var="db_user=${{ secrets.DB_USER }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -var="cors_origin=${{ vars.CORS_ORIGIN }}"

      - name: Get Website URL
        if: github.ref == 'refs/heads/main'
        working-directory: ./terraform
        id: get_url
        run: |
          # Check if the output exists and capture it
          if WEBSITE_URL=$(terraform output -raw website_url 2>/dev/null); then
            echo "url=${WEBSITE_URL}" >> $GITHUB_OUTPUT
            echo "url_exists=true" >> $GITHUB_OUTPUT
          else
            echo "url_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Display URLs
        if: github.ref == 'refs/heads/main'
        run: |
          echo "✨ Deployment Complete! ✨"
          if [[ "${{ steps.get_url.outputs.url_exists }}" == "true" ]]; then
            echo "Website URL: ${{ steps.get_url.outputs.url }}"
            echo "You can access your static website at the URL above."
          else
            echo "Website URL is not available yet. Please check your AWS Console."
            echo "You can find your S3 bucket URL in the S3 console under your bucket's properties." 